Index: src/test/java/pages/CostumerRegistrationPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pages;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\nimport utilities.Driver;\n\npublic class CostumerRegistrationPage {\n    public CostumerRegistrationPage(){\n        PageFactory.initElements(Driver.getDriver(),this);\n\n    }\n    @FindBy(id= \"account-menu\")\n    public WebElement user_button;\n\n    @FindBy(xpath = \"//a[@class='dropdown-item'][2]\")\n    public WebElement registration_button;\n\n    @FindBy(id= \"ssn\")\n    public WebElement SSN_TextBox;\n\n    @FindBy(xpath = \"//input[@name='ssn']\")\n    public WebElement SSN_Number;\n\n    @FindBy(id = \"firstname\")\n    public WebElement First_Name_TextBox;\n\n    @FindBy(id = \"firstname\")\n    public WebElement First_Name;\n\n    @FindBy(id= \"lastname\")\n    public WebElement Last_Name_TextBox;\n\n    @FindBy(id= \"lastname\")\n    public WebElement Last_Name;\n\n    @FindBy(id = \"address\")\n    public WebElement Address_TextBox;\n\n    @FindBy(id = \"address\")\n    public WebElement Address;\n\n    @FindBy(id = \"mobilephone\")\n    public WebElement Mobile_Phone_Number_TextBox;\n\n    @FindBy(id = \"mobilephone\")\n    public WebElement Mobile_Phone_Number;\n\n    @FindBy(id = \"username\")\n    public WebElement Username_TextBox;\n\n    @FindBy(id = \"username\")\n    public WebElement Username;\n\n    @FindBy(id = \"email\")\n    public WebElement Email_TextBox;\n\n    @FindBy(id = \"email\")\n    public WebElement Email;\n\n    @FindBy(id = \"firstPassword\")\n    public WebElement New_password_TextBox;\n\n    @FindBy(id = \"firstPassword\")\n    public WebElement New_password;\n\n    @FindBy(xpath = \"//li[@class='point'][5]\")\n    public WebElement Password_strength;\n\n    @FindBy(id = \"secondPassword\")\n    public WebElement Password_Confirmation_TextBox;\n\n    @FindBy(id = \"secondPassword\")\n    public WebElement Password_Confirmation;\n\n    @FindBy(id = \"register-submit\")\n    public WebElement Register_button;\n\n    @FindBy()\n    public WebElement Message;\n\n//    @US02TC02\n\n    @FindBy()\n    public WebElement charecter_SSN_TextBox;\n\n    @FindBy()\n    public WebElement No_SSN_message;\n\n//    @US02TC03\n\n    @FindBy()\n    public WebElement charecter_Mobile_Phone_TextBox;\n\n    @FindBy()\n    public WebElement no_see_mobile_phone_number_invalid;\n\n//    @US02TC04\n\n    @FindBy()\n    public WebElement charecter_Email_TextBox;\n\n    @FindBy()\n    public WebElement no_See_Email_Invalid_Message;\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/pages/CostumerRegistrationPage.java	(revision fed59f3f27ba922d6871bcaab7e8759f8f8e6dcf)
+++ src/test/java/pages/CostumerRegistrationPage.java	(date 1605046044336)
@@ -76,33 +76,33 @@
     @FindBy(id = "register-submit")
     public WebElement Register_button;
 
-    @FindBy()
+    @FindBy(xpath = "//*[.='Registration saved!']")
     public WebElement Message;
 
 //    @US02TC02
 
-    @FindBy()
+    @FindBy(id = "ssn")
     public WebElement charecter_SSN_TextBox;
 
-    @FindBy()
+    @FindBy(xpath = "translation-not-found[Your SSN is required]")
     public WebElement No_SSN_message;
 
 //    @US02TC03
 
-    @FindBy()
+    @FindBy(id = "mobilephone")
     public WebElement charecter_Mobile_Phone_TextBox;
 
-    @FindBy()
+    @FindBy(xpath = "//*[.='Your mobile phone number is invalid']")
     public WebElement no_see_mobile_phone_number_invalid;
 
 //    @US02TC04
 
-    @FindBy()
+    @FindBy(id = "email")
     public WebElement charecter_Email_TextBox;
 
-    @FindBy()
+    @FindBy(xpath = "//*[.='This field is invalid']")
     public WebElement no_See_Email_Invalid_Message;
 
 
-
 }
+
Index: src/test/java/utilities/Driver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utilities;\n\nimport com.google.common.base.Function;\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.Assert;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.safari.SafariDriver;\nimport org.openqa.selenium.support.ui.*;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class Driver {\n\n    private Driver(){\n\n    }\n    static WebDriver driver;\n    public static WebDriver getDriver(){\n        if(driver==null){\n            switch (ConfigurationReader.getProperty(\"browser\")){\n                case \"chrome\":\n                    WebDriverManager.chromedriver().setup();;\n                    driver = new ChromeDriver();\n                    break;\n\n                case  \"firefox\":\n                    WebDriverManager.firefoxdriver().setup();\n                    driver = new FirefoxDriver();\n                    break;\n                case \"ie\":\n                    WebDriverManager.iedriver().setup();\n                    driver = new InternetExplorerDriver();\n                    break;\n                case \"safari\":\n                    WebDriverManager.getInstance(SafariDriver.class).setup();\n                    driver = new SafariDriver();\n                    break;\n                case \"handless=chrome\":\n                    WebDriverManager.chromedriver().setup();\n                    driver = new ChromeDriver(new ChromeOptions().setHeadless(true));\n                    break;\n            }\n        }\n        driver.manage().window().maximize();\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n        return  driver;\n    }\n    public static void closeDriver(){\n        if (driver!=null){\n            driver.quit();\n            driver=null;\n        }\n    }\n    public static void wait(int secs) {\n        try {\n            Thread.sleep(1000 * secs);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    /*\n     * switches to new window by the exact title\n     * returns to original window if windows with given title not found\n     */\n    public static void switchToWindow(String targetTitle) {\n        String origin = Driver.getDriver().getWindowHandle();\n        for (String handle : Driver.getDriver().getWindowHandles()) {\n            Driver.getDriver().switchTo().window(handle);\n            if (Driver.getDriver().getTitle().equals(targetTitle)) {\n                return;\n            }\n        }\n        Driver.getDriver().switchTo().window(origin);\n    }\n    public static void hover(WebElement element) {\n        Actions actions = new Actions(Driver.getDriver());\n        actions.moveToElement(element).perform();\n    }\n    /**\n     * return a list of string from a list of elements ignores any element with no\n     * text\n     *\n     * @param list\n     * @return\n     */\n    public static List<String> getElementsText(List<WebElement> list) {\n        List<String> elemTexts = new ArrayList<>();\n        for (WebElement el : list) {\n            elemTexts.add(el.getText());\n        }\n        return elemTexts;\n    }\n    public static List<String> getElementsText(By locator) {\n        List<WebElement> elems = Driver.getDriver().findElements(locator);\n        List<String> elemTexts = new ArrayList<>();\n        for (WebElement el : elems) {\n            elemTexts.add(el.getText());\n        }\n        return elemTexts;\n    }\n    public static WebElement waitForVisibility(WebElement element, int timeToWaitInSec) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeToWaitInSec);\n        return wait.until(ExpectedConditions.visibilityOf(element));\n    }\n    public static WebElement waitForVisibility(By locator, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\n        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));\n    }\n    public static Boolean waitForInVisibility(By locator, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\n        return wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));\n    }\n    public static WebElement waitForClickablility(WebElement element, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\n        return wait.until(ExpectedConditions.elementToBeClickable(element));\n    }\n    public static WebElement waitForClickablility(By locator, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\n        return wait.until(ExpectedConditions.elementToBeClickable(locator));\n    }\n    public static void waitForPageToLoad(long timeOutInSeconds) {\n        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {\n            public Boolean apply(WebDriver driver) {\n                return ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").equals(\"complete\");\n            }\n        };\n        try {\n            WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeOutInSeconds);\n            wait.until(expectation);\n        } catch (Exception error) {\n            error.printStackTrace();\n        }\n    }\n    public static WebElement fluentWait(final WebElement webElement, int timeinsec) {\n        FluentWait<WebDriver> wait = new FluentWait<WebDriver>(Driver.getDriver())\n                .withTimeout(Duration.ofSeconds(timeinsec))\n                .pollingEvery(Duration.ofMillis(500))\n                .ignoring(NoSuchElementException.class);\n        WebElement element = wait.until(new Function<WebDriver, WebElement>() {\n            public WebElement apply(WebDriver driver) {\n                return webElement;\n            }\n        });\n        return element;\n    }\n    /**\n     * Verifies whether the element matching the provided locator is displayed on page\n     * fails if the element matching the provided locator is not found or not displayed\n     *\n     * @param by\n     */\n    public static void verifyElementDisplayed(By by) {\n        try {\n            assertTrue(\"Element not visible: \" + by, Driver.getDriver().findElement(by).isDisplayed());\n        } catch (NoSuchElementException e) {\n            Assert.fail(\"Element not found: \" + by);\n        }\n    }\n    /**\n     * Verifies whether the element matching the provided locator is NOT displayed on page\n     * fails if the element matching the provided locator is not found or not displayed\n     *\n     * @param by\n     */\n    public static void verifyElementNotDisplayed(By by) {\n        try {\n            assertFalse(\"Element should not be visible: \" + by, Driver.getDriver().findElement(by).isDisplayed());\n        } catch (NoSuchElementException e) {\n            e.printStackTrace();\n        }\n    }\n    /**\n     * Verifies whether the element is displayed on page\n     * fails if the element is not found or not displayed\n     *\n     * @param element\n     */\n    public static void verifyElementDisplayed(WebElement element) {\n        try {\n            assertTrue(\"Element not visible: \" + element, element.isDisplayed());\n        } catch (NoSuchElementException e) {\n            Assert.fail(\"Element not found: \" + element);\n        }\n    }\n    /**\n     * Waits for element to be not stale\n     *\n     * @param element\n     */\n    public void waitForStaleElement(WebElement element) {\n        int y = 0;\n        while (y <= 15) {\n            if (y == 1)\n                try {\n                    element.isDisplayed();\n                    break;\n                } catch (StaleElementReferenceException st) {\n                    y++;\n                    try {\n                        Thread.sleep(300);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                } catch (WebDriverException we) {\n                    y++;\n                    try {\n                        Thread.sleep(300);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n        }\n    }\n    /**\n     * Selects a random value from a dropdown list and returns the selected Web Element\n     *\n     * @param select\n     * @return\n     */\n    public static WebElement selectRandomTextFromDropdown(Select select) {\n        Random random = new Random();\n        List<WebElement> weblist = select.getOptions();\n        int optionIndex = 1 + random.nextInt(weblist.size() - 1);\n        select.selectByIndex(optionIndex);\n        return select.getFirstSelectedOption();\n    }\n    /**\n     * Clicks on an element using JavaScript\n     *\n     * @param element\n     */\n    public static void clickWithJS(WebElement element) {\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].click();\", element);\n    }\n    /**\n     * Scrolls down to an element using JavaScript\n     *\n     * @param element\n     */\n    public static void scrollToElement(WebElement element) {\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\n    }\n    /**\n     * Performs double click action on an element\n     *\n     * @param element\n     */\n    public static void doubleClick(WebElement element) {\n        new Actions(Driver.getDriver()).doubleClick(element).build().perform();\n    }\n    /**\n     * Changes the HTML attribute of a Web Element to the given value using JavaScript\n     *\n     * @param element\n     * @param attributeName\n     * @param attributeValue\n     */\n    public static void setAttribute(WebElement element, String attributeName, String attributeValue) {\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].setAttribute(arguments[1], arguments[2]);\", element, attributeName, attributeValue);\n    }\n    /**\n     * @param element\n     * @param check\n     */\n    public static void selectCheckBox(WebElement element, boolean check) {\n        if (check) {\n            if (!element.isSelected()) {\n                element.click();\n            }\n        } else {\n            if (element.isSelected()) {\n                element.click();\n            }\n        }\n    }\n    public static void clickWithTimeOut(WebElement element, int timeout) {\n        for (int i = 0; i < timeout; i++) {\n            try {\n                element.click();\n                return;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n    }\n    /**\n     * executes the given JavaScript command on given web element\n     *\n     * @param element\n     */\n    public static void executeJScommand(WebElement element, String command) {\n        JavascriptExecutor jse = (JavascriptExecutor) Driver.getDriver();\n        jse.executeScript(command, element);\n    }\n    /**\n     * executes the given JavaScript command on given web element\n     *\n     * @param command\n     */\n    public static void executeJScommand(String command) {\n        JavascriptExecutor jse = (JavascriptExecutor) Driver.getDriver();\n        jse.executeScript(command);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/utilities/Driver.java	(revision fed59f3f27ba922d6871bcaab7e8759f8f8e6dcf)
+++ src/test/java/utilities/Driver.java	(date 1605045879806)
@@ -314,4 +314,19 @@
         JavascriptExecutor jse = (JavascriptExecutor) Driver.getDriver();
         jse.executeScript(command);
     }
+    public static String getNewSSN(String ssn){
+        String[] data ={"0","1","2","3","4","5","6","7","8","9" };
+        int indexOfHyphen = ssn.indexOf("-");
+        String ssnFirstPart = ssn.substring(3,indexOfHyphen);
+        String ssnSecontPart = ssn.substring(6,indexOfHyphen);
+        String ekSSN ="";
+        for(int i = 0; i < 3; i++ ){
+            int random = (int)(Math.random()*data.length);
+            ekSSN += data[random];
+
+        }
+        ssnFirstPart = ssnFirstPart+ ekSSN;
+        ssn = ssnFirstPart + ssnSecontPart;
+        return ssn;
+    }
 }
